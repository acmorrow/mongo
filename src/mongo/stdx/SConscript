# -*- mode: python -*-

Import("env")

env = env.Clone()

env.Benchmark(
    target='condition_variable_bm',
    source=[
        'condition_variable_bm.cpp',
    ],
    LIBDEPS=[
        '$BUILD_DIR/mongo/base',
    ],
)


stdxEnv = env.Clone()

stdxEnv.AppendUnique(
    LINKFLAGS=[
        # If we have -static-libstdc++ on the link line, then we want
        # to injest the entire C++ runtime library into libstdx, not
        # just referenced symbols. If we don't have it. then having
        # this won't have any effect.
        # '$LINK_WHOLE_ARCHIVE_LIB_START',

        # For whatever reason, '-lgcc -lgcc_eh' appears multiple times
        # on the link line when building with --static-libgcc. Without
        # this, we would get duplicate symbol errors because of that,
        # since we are pulling in the whole library unconditionally.
        "-Wl,-z,muldefs",

        "-static-libstdc++",

        "-static-libgcc",

        '-Wl,--push-state',

        '-Wl,--whole-archive',

        '-Wl,-Bstatic',

        '-lstdc++',

        '-lgcc',

        '-lgcc_eh',

        '-Wl,--pop-state',
    ],
)

stdxEnv.Library(
    target='stdx',
    source=[
        'set_terminate_internals.cpp',
    ],

    # This shouldn't be necessary when we disallow mixing LIBS and LIBDEPS.
    LIBS=[
    ],

    LIBDEPS_TAGS=[
        # There should be no linking dependencies upon any other
        # libraries, for `libstdx`.  This library is a shim filling in
        # for deficiencies in various standard library
        # implementations.  There should never be any link-time
        # dependencies into mongo internals.
        'lint-leaf-node-no-deps',

        # Other libraries that are tagged as not being allowed to have
        # dependencies may in fact get this one.
        'lint-leaf-node-allowed-dep',
    ],

    # We need this to be injected behind the allocator, not the other
    # way around, so we need to disable the allocator injection or we
    # would have a circular dependency.
    DISABLE_ALLOCATOR_SHIM_INJECTION=True,

    # Similarly, we can't depend on ourselves.
    DISABLE_STDX_INJECTION=True,
)

env.CppUnitTest(
    target='stdx_test',
    source=[
        'unordered_map_test.cpp'
    ],
    LIBDEPS=[
        '$BUILD_DIR/third_party/shim_abseil',
    ],
)

# Specify UNITTEST_HAS_CUSTOM_MAINLINE because it needs low-level control of
# thread creation and signals, so it shouldn't use unittest_main and typical
# mongo startup routines.
env.CppUnitTest(
    target='sigaltstack_location_test',
    source=[
        'sigaltstack_location_test.cpp',
    ],
    LIBDEPS=[
        '$BUILD_DIR/mongo/base',
    ],
    UNITTEST_HAS_CUSTOM_MAINLINE=True,
)

# The tests for `stdx::set_terminate` need to run outside of the mongo unittest harneses.
# The tests require altering the global `set_terminate` handler, which our unittest framework
# doesn't expect to have happen.  Further, the tests have to return successfully from a
# terminate condition which interacts poorly with the unittest framework.
#
# A set of dedicated binaries to each test case is actually the simplest way to accomplish
# robust testing of this mechanism.

# Needs to be a different test -- It has to have direct control over the `main()` entry point.
env.CppUnitTest(
    target='set_terminate_dispatch_test',
    source=[
        'set_terminate_dispatch_test.cpp',
    ],
    LIBDEPS=[
        '$BUILD_DIR/mongo/base',
    ],
    UNITTEST_HAS_CUSTOM_MAINLINE=True,
)

# Needs to be a different test -- It has to have direct control over the `main()` entry point.
env.CppUnitTest(
    target='set_terminate_from_main_die_in_thread_test',
    source=[
        'set_terminate_from_main_die_in_thread_test.cpp',
    ],
    LIBDEPS=[
        '$BUILD_DIR/mongo/base',
    ],
    UNITTEST_HAS_CUSTOM_MAINLINE=True,
)

# Needs to be a different test -- It has to have direct control over the `main()` entry point.
env.CppUnitTest(
    target='set_terminate_from_thread_die_in_main_test',
    source=[
        'set_terminate_from_thread_die_in_main_test.cpp',
    ],
    LIBDEPS=[
        '$BUILD_DIR/mongo/base',
    ],
    UNITTEST_HAS_CUSTOM_MAINLINE=True,
)

# Needs to be a different test -- It has to have direct control over the `main()` entry point.
env.CppUnitTest(
    target='set_terminate_from_thread_die_in_thread_test',
    source=[
        'set_terminate_from_thread_die_in_thread_test.cpp',
    ],
    LIBDEPS=[
        '$BUILD_DIR/mongo/base',
    ],
    UNITTEST_HAS_CUSTOM_MAINLINE=True,
)
