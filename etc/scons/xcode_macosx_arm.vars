# Configures the build to use XCode targeting macOS

import subprocess

CC = subprocess.check_output(['xcrun', '-f', '--sdk', 'macosx', 'clang']).decode('utf-8').strip()
CXX = subprocess.check_output(['xcrun', '-f', '--sdk', 'macosx', 'clang++']).decode('utf-8').strip()
DSYMUTIL = subprocess.check_output(['xcrun', '-f', '--sdk', 'macosx', 'dsymutil']).decode('utf-8').strip()
STRIP = subprocess.check_output(['xcrun', '-f', '--sdk', 'macosx', 'strip']).decode('utf-8').strip()

sdk_path = subprocess.check_output(['xcrun', '--sdk', 'macosx', '--show-sdk-path']).decode('utf-8').strip()

# TODO: If you say -arch arm64e here, everything compiles and links,
# but the binaries don't start up on the DTK machine without an nvram
# change, per https://developer.apple.com/forums/thread/652340. Use
# -arch arm64 for now.
CCFLAGS = "-isysroot {} -mmacosx-version-min=11.0 -target darwin20.0.0 -arch arm64".format(sdk_path)
LINKFLAGS = "-Wl,-syslibroot,{} -mmacosx-version-min=11.0 -target darwin20.0.0 -arch arm64".format(sdk_path)
